// <auto-generated />
using System;
using ApiKeyAuthentication.API.Data.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiKeyAuthentication.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230318175437_data")]
    partial class data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiKeyAuthentication.API.Data.Entities.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("ApiKeyAuthentication.API.Data.Entities.ApiKeyPermission", b =>
                {
                    b.Property<Guid>("ApiKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("ApiKeyId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ApiKeyPermissions");
                });

            modelBuilder.Entity("ApiKeyAuthentication.API.Data.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74baad9c-0157-46c5-918d-7c6ff1ac4acc"),
                            Name = "test client"
                        });
                });

            modelBuilder.Entity("ApiKeyAuthentication.API.Data.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ApiKeyAuthentication.API.Data.Entities.ApiKey", b =>
                {
                    b.HasOne("ApiKeyAuthentication.API.Data.Entities.Client", "Client")
                        .WithMany("ApiKeys")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApiKeyAuthentication.API.Data.Entities.ApiKeyPermission", b =>
                {
                    b.HasOne("ApiKeyAuthentication.API.Data.Entities.ApiKey", "ApiKey")
                        .WithMany("Permissions")
                        .HasForeignKey("ApiKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiKeyAuthentication.API.Data.Entities.Permission", "Permission")
                        .WithMany("ApiKeys")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiKey");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("ApiKeyAuthentication.API.Data.Entities.ApiKey", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("ApiKeyAuthentication.API.Data.Entities.Client", b =>
                {
                    b.Navigation("ApiKeys");
                });

            modelBuilder.Entity("ApiKeyAuthentication.API.Data.Entities.Permission", b =>
                {
                    b.Navigation("ApiKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
